/*Agnisys, Inc. ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : */
/* generated by      : jinghu*/
/* generated from    : /autox-sd/projects/ip/pcie_ss/cash_v3/pcie_ss_021820/src/rtl/pcie_reg/pcie_ep.xlsx*/
/* IDesignSpec rev   : idsbatch v 6.24.0.0 */

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : hwint*/
/* Bus Type                   : AMBA-AHB*/
/* BigEndian                  : false*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/* parameter macros  */
#define NUM_STREAM 32    /*Number of data streams*/

/*//////////////////  Chip : pcie_ep ///////////////////*/

#ifndef _PCIE_EP_REGS_H_
#define _PCIE_EP_REGS_H_

/*block : frame_ctrl */


/*section : common */

typedef union  {
    struct {
        hwint MAJOR : 8;           /* 0:7 SW=ro HW=ro 0x1 */
        hwint MINOR : 8;           /* 8:15 SW=ro HW=ro 0x0 */
        hwint REVISION : 16;           /* 16:31 SW=ro HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_VERSION;

typedef union  {
    struct {
        hwint RESET : 1;           /* 0 SW=rw HW=rw 0x0 */
        hwint resv1 : 31;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SW_RESET;

typedef struct {
    pcie_ep_frame_ctrl_HW_VERSION  HW_VERSION;
    pcie_ep_frame_ctrl_SW_RESET  SW_RESET;
    
    
    
} pcie_ep_frame_ctrl_common;


/*section : interrupt */

/*  HW_IRQ DESCRIPTION :Hardware IRQ register. This is for FPGA hardware to generate interrupts to host. */
typedef union  {
    struct {
        hwint HW_IRQ_VEC : 5;           /* 0:4 SW=rw HW=ro 0x0 */
        
        hwint resv5 : 4;
        hwint HW_IRQ_FUNC : 7;           /* 9:15 SW=rw HW=ro 0x0 */
        hwint resv16 : 16;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ;

/*  HW_IRQ_STATUS_0 DESCRIPTION :IRQ status register. */
typedef union  {
    struct {
        hwint DESC_RELEASED : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ_STATUS_0;

typedef union  {
    struct {
        hwint FRAME_DROPPED : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ_STATUS_1;

/*  HW_IRQ_MASK_0 DESCRIPTION :IRQ mask register. */
typedef union  {
    struct {
        hwint DESC_RELEASED : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ_MASK_0;

typedef union  {
    struct {
        hwint FRAME_DROPPED : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ_MASK_1;

/*  HW_IRQ_CLEAR_0 DESCRIPTION :IRQ clear register. IRQ is only cleared upon IRQ clear command. */
typedef union  {
    struct {
        hwint DESC_RELEASED : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0;

typedef union  {
    struct {
        hwint FRAME_DROPPED : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1;

/*  HW_IRQ_CMD DESCRIPTION :IRQ command. */
typedef union  {
    struct {
        hwint CLEAR : 1;           /* 0 SW=rw HW=rw 0x0 */
        hwint resv1 : 31;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_IRQ_CMD;

/*  USR_IRQ DESCRIPTION :User IRQ register. This is for ARM software to generate interrupts to host. */
typedef union  {
    struct {
        hwint USR_IRQ_VEC : 5;           /* 0:4 SW=rw HW=ro 0x0 */
        
        hwint resv5 : 4;
        hwint USR_IRQ_FUNC : 7;           /* 9:15 SW=rw HW=ro 0x0 */
        hwint resv16 : 16;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_USR_IRQ;

typedef union  {
    struct {
        hwint STATUS : 32;           /* 0:31 SW=rw HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_USR_IRQ_STATUS;

typedef union  {
    struct {
        hwint MASK : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_USR_IRQ_MASK;

typedef union  {
    struct {
        hwint CLEAR : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_USR_IRQ_CLEAR;

typedef union  {
    struct {
        hwint CLEAR : 1;           /* 0 SW=rw HW=rw 0x0 */
        hwint resv1 : 31;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_USR_IRQ_CMD;

typedef union  {
    struct {
        hwint STATUS : 32;           /* 0:31 SW=rw HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_FPGA_IRQ_STATUS;

typedef union  {
    struct {
        hwint MASK : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_FPGA_IRQ_MASK;

typedef union  {
    struct {
        hwint CLEAR : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR;

typedef union  {
    struct {
        hwint CLEAR : 1;           /* 0 SW=rw HW=rw 0x0 */
        hwint resv1 : 31;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_FPGA_IRQ_CMD;

typedef struct {
    pcie_ep_frame_ctrl_HW_IRQ  HW_IRQ;
    pcie_ep_frame_ctrl_HW_IRQ_STATUS_0  HW_IRQ_STATUS_0;
    pcie_ep_frame_ctrl_HW_IRQ_STATUS_1  HW_IRQ_STATUS_1;
    pcie_ep_frame_ctrl_HW_IRQ_MASK_0  HW_IRQ_MASK_0;
    pcie_ep_frame_ctrl_HW_IRQ_MASK_1  HW_IRQ_MASK_1;
    pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0  HW_IRQ_CLEAR_0;
    pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1  HW_IRQ_CLEAR_1;
    pcie_ep_frame_ctrl_HW_IRQ_CMD  HW_IRQ_CMD;
    pcie_ep_frame_ctrl_USR_IRQ  USR_IRQ;
    pcie_ep_frame_ctrl_USR_IRQ_STATUS  USR_IRQ_STATUS;
    pcie_ep_frame_ctrl_USR_IRQ_MASK  USR_IRQ_MASK;
    pcie_ep_frame_ctrl_USR_IRQ_CLEAR  USR_IRQ_CLEAR;
    pcie_ep_frame_ctrl_USR_IRQ_CMD  USR_IRQ_CMD;
    pcie_ep_frame_ctrl_FPGA_IRQ_STATUS  FPGA_IRQ_STATUS;
    pcie_ep_frame_ctrl_FPGA_IRQ_MASK  FPGA_IRQ_MASK;
    pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR  FPGA_IRQ_CLEAR;
    pcie_ep_frame_ctrl_FPGA_IRQ_CMD  FPGA_IRQ_CMD;
    
    
    
} pcie_ep_frame_ctrl_interrupt;


/*section : stream_addr */

typedef union  {
    struct {
        hwint EN : 1;           /* 0 SW=rw HW=ro 0x0 */
        hwint SW_CTRL_MODE : 1;           /* 1 SW=rw HW=ro 0x0 */
        
        hwint resv2 : 2;
        hwint NUM_ADDR : 3;           /* 4:6 SW=rw HW=ro 0x0 */
        
        hwint resv7 : 1;
        hwint QID : 11;           /* 8:18 SW=rw HW=ro 0x0 */
        hwint resv19 : 13;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_STREAM_CTRL;

typedef union  {
    struct {
        hwint ADDR : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_0_LO;

typedef union  {
    struct {
        hwint ADDR : 4;           /* 0:3 SW=rw HW=ro 0x0 */
        hwint resv4 : 28;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_0_HI;

typedef union  {
    struct {
        hwint ADDR : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_1_LO;

typedef union  {
    struct {
        hwint ADDR : 4;           /* 0:3 SW=rw HW=ro 0x0 */
        hwint resv4 : 28;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_1_HI;

typedef union  {
    struct {
        hwint ADDR : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_2_LO;

typedef union  {
    struct {
        hwint ADDR : 4;           /* 0:3 SW=rw HW=ro 0x0 */
        hwint resv4 : 28;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_2_HI;

typedef union  {
    struct {
        hwint ADDR : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_3_LO;

typedef union  {
    struct {
        hwint ADDR : 4;           /* 0:3 SW=rw HW=ro 0x0 */
        hwint resv4 : 28;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SRC_ADDR_3_HI;

typedef union  {
    struct {
        hwint SIZE : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_FRAME_SIZE;

typedef union  {
    struct {
        hwint CMD : 1;           /* 0 SW=rw HW=rw 0x0 */
        hwint resv1 : 31;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_FRAME_START;

typedef union  {
    struct {
        hwint RESET : 1;           /* 0 SW=rw HW=ro 0x0 */
        hwint resv1 : 31;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_STREAM_RESET;

typedef struct {
    pcie_ep_frame_ctrl_STREAM_CTRL  STREAM_CTRL;
    pcie_ep_frame_ctrl_SRC_ADDR_0_LO  SRC_ADDR_0_LO;
    pcie_ep_frame_ctrl_SRC_ADDR_0_HI  SRC_ADDR_0_HI;
    pcie_ep_frame_ctrl_SRC_ADDR_1_LO  SRC_ADDR_1_LO;
    pcie_ep_frame_ctrl_SRC_ADDR_1_HI  SRC_ADDR_1_HI;
    pcie_ep_frame_ctrl_SRC_ADDR_2_LO  SRC_ADDR_2_LO;
    pcie_ep_frame_ctrl_SRC_ADDR_2_HI  SRC_ADDR_2_HI;
    pcie_ep_frame_ctrl_SRC_ADDR_3_LO  SRC_ADDR_3_LO;
    pcie_ep_frame_ctrl_SRC_ADDR_3_HI  SRC_ADDR_3_HI;
    pcie_ep_frame_ctrl_FRAME_SIZE  frame_size;
    pcie_ep_frame_ctrl_FRAME_START  FRAME_START;
    pcie_ep_frame_ctrl_STREAM_RESET  STREAM_RESET;
    
    
    hwint8 filler1[0x50];
    
    
} pcie_ep_frame_ctrl_stream_addr;


/*section : scratch */

typedef union  {
    struct {
        hwint VAL : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SCRATCH;

typedef struct {
    pcie_ep_frame_ctrl_SCRATCH  SCRATCH;
    
    
    
} pcie_ep_frame_ctrl_scratch;


/*section : spare */

typedef union  {
    struct {
        hwint VAL : 32;           /* 0:31 SW=rw HW=ro 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SPARE;

typedef union  {
    struct {
        hwint VAL : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_SPARE_STATUS;

typedef struct {
    pcie_ep_frame_ctrl_SPARE  SPARE;
    pcie_ep_frame_ctrl_SPARE_STATUS  SPARE_STATUS;
    
    
    
} pcie_ep_frame_ctrl_spare;


/*section : common_debug */

typedef union  {
    struct {
        hwint LINK_UP : 1;           /* 0 SW=ro HW=rw 0x0 */
        
        hwint resv1 : 3;
        hwint CURRENT_STREAM_ID : 4;           /* 4:7 SW=ro HW=rw 0x0 */
        hwint LAST_STREAM_ID : 4;           /* 8:11 SW=ro HW=rw 0x0 */
        hwint resv12 : 20;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_HW_STATUS;

typedef struct {
    pcie_ep_frame_ctrl_HW_STATUS  HW_STATUS;
    
    
    
} pcie_ep_frame_ctrl_common_debug;


/*section : stream_debug */

typedef union  {
    struct {
        hwint CURRENT_SRC_ADDR : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_ADDR_STATUS_0;

typedef union  {
    struct {
        hwint CURRENT_DEST_ADDR : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_ADDR_STATUS_1;

typedef union  {
    struct {
        hwint LAST_SRC_ADDR : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_ADDR_STATUS_2;

typedef union  {
    struct {
        hwint LAST_DEST_ADDR : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_ADDR_STATUS_3;

typedef union  {
    struct {
        hwint CNT : 3;           /* 0:2 SW=ro HW=rw 0x0 */
        hwint resv3 : 29;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_PENDING_FRAME_CNT;

typedef union  {
    struct {
        hwint CNT : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_DONE_FRAME_CNT;

typedef union  {
    struct {
        hwint CNT : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_NUM_DROPPED_FRAME;

typedef union  {
    struct {
        hwint CNT : 32;           /* 0:31 SW=ro HW=rw 0x0 */
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_NUM_DROPPED_DESC;

typedef union  {
    struct {
        hwint WORD_CNT : 3;           /* 0:2 SW=ro HW=rw 0x0 */
        hwint resv3 : 29;
    } bf;
    hwint  dw;
    
    
} pcie_ep_frame_ctrl_DESC_FIFO_STATUS;

typedef struct {
    pcie_ep_frame_ctrl_ADDR_STATUS_0  ADDR_STATUS_0;
    pcie_ep_frame_ctrl_ADDR_STATUS_1  ADDR_STATUS_1;
    pcie_ep_frame_ctrl_ADDR_STATUS_2  ADDR_STATUS_2;
    pcie_ep_frame_ctrl_ADDR_STATUS_3  ADDR_STATUS_3;
    pcie_ep_frame_ctrl_PENDING_FRAME_CNT  PENDING_FRAME_CNT;
    pcie_ep_frame_ctrl_DONE_FRAME_CNT  DONE_FRAME_CNT;
    pcie_ep_frame_ctrl_NUM_DROPPED_FRAME  NUM_DROPPED_FRAME;
    pcie_ep_frame_ctrl_NUM_DROPPED_DESC  NUM_DROPPED_DESC;
    pcie_ep_frame_ctrl_DESC_FIFO_STATUS  DESC_FIFO_STATUS;
    
    
    
} pcie_ep_frame_ctrl_stream_debug;


typedef struct {
    
    union {
        pcie_ep_frame_ctrl_common s;
        hwint8 filler[0x8];
    } common;
    
    union {
        pcie_ep_frame_ctrl_interrupt s;
        hwint8 filler[0x44];
    } interrupt;
    
    hwint8 filler1[0xB4];
    
    
    union {
        pcie_ep_frame_ctrl_stream_addr s;
        hwint8 filler[0x80];
    } stream_addr[NUM_STREAM];
    
    union {
        pcie_ep_frame_ctrl_scratch s;
        hwint8 filler[0x4];
    } scratch[0x40];
    
    union {
        pcie_ep_frame_ctrl_spare s;
        hwint8 filler[0x8];
    } spare[0x10];
    
    union {
        pcie_ep_frame_ctrl_common_debug s;
        hwint8 filler[0x4];
    } common_debug;
    
    union {
        pcie_ep_frame_ctrl_stream_debug s;
        hwint8 filler[0x24];
    } stream_debug[NUM_STREAM];
    
    
    hwint8 filler2[0x8FC];
    
    
} pcie_ep_frame_ctrl_s;


#define pcie_ep_frame_ctrl_HW_VERSION_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_VERSION_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_HW_VERSION_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_HW_VERSION_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_VERSION_DEFAULT 0x00000001

#define pcie_ep_frame_ctrl_SW_RESET_READMASK 0x1
#define pcie_ep_frame_ctrl_SW_RESET_WRITEMASK 0x1
#define pcie_ep_frame_ctrl_SW_RESET_VOLATILEMASK 0x1
#define pcie_ep_frame_ctrl_SW_RESET_RESETMASK 0x1
#define pcie_ep_frame_ctrl_SW_RESET_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_READMASK 0xFE1F
#define pcie_ep_frame_ctrl_HW_IRQ_WRITEMASK 0xFE1F
#define pcie_ep_frame_ctrl_HW_IRQ_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_RESETMASK 0xFE1F
#define pcie_ep_frame_ctrl_HW_IRQ_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_IRQ_CMD_READMASK 0x1
#define pcie_ep_frame_ctrl_HW_IRQ_CMD_WRITEMASK 0x1
#define pcie_ep_frame_ctrl_HW_IRQ_CMD_VOLATILEMASK 0x1
#define pcie_ep_frame_ctrl_HW_IRQ_CMD_RESETMASK 0x1
#define pcie_ep_frame_ctrl_HW_IRQ_CMD_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_USR_IRQ_READMASK 0xFE1F
#define pcie_ep_frame_ctrl_USR_IRQ_WRITEMASK 0xFE1F
#define pcie_ep_frame_ctrl_USR_IRQ_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_USR_IRQ_RESETMASK 0xFE1F
#define pcie_ep_frame_ctrl_USR_IRQ_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_USR_IRQ_MASK_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_MASK_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_MASK_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_USR_IRQ_MASK_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_MASK_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_USR_IRQ_CMD_READMASK 0x1
#define pcie_ep_frame_ctrl_USR_IRQ_CMD_WRITEMASK 0x1
#define pcie_ep_frame_ctrl_USR_IRQ_CMD_VOLATILEMASK 0x1
#define pcie_ep_frame_ctrl_USR_IRQ_CMD_RESETMASK 0x1
#define pcie_ep_frame_ctrl_USR_IRQ_CMD_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_READMASK 0x1
#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_WRITEMASK 0x1
#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_VOLATILEMASK 0x1
#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_RESETMASK 0x1
#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_STREAM_CTRL_READMASK 0x7FF73
#define pcie_ep_frame_ctrl_STREAM_CTRL_WRITEMASK 0x7FF73
#define pcie_ep_frame_ctrl_STREAM_CTRL_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_STREAM_CTRL_RESETMASK 0x7FF73
#define pcie_ep_frame_ctrl_STREAM_CTRL_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_READMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_WRITEMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_RESETMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_READMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_WRITEMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_RESETMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_READMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_WRITEMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_RESETMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_READMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_WRITEMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_RESETMASK 0xF
#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_FRAME_SIZE_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FRAME_SIZE_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FRAME_SIZE_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_FRAME_SIZE_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_FRAME_SIZE_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_FRAME_START_READMASK 0x1
#define pcie_ep_frame_ctrl_FRAME_START_WRITEMASK 0x1
#define pcie_ep_frame_ctrl_FRAME_START_VOLATILEMASK 0x1
#define pcie_ep_frame_ctrl_FRAME_START_RESETMASK 0x1
#define pcie_ep_frame_ctrl_FRAME_START_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_STREAM_RESET_READMASK 0x1
#define pcie_ep_frame_ctrl_STREAM_RESET_WRITEMASK 0x1
#define pcie_ep_frame_ctrl_STREAM_RESET_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_STREAM_RESET_RESETMASK 0x1
#define pcie_ep_frame_ctrl_STREAM_RESET_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SCRATCH_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SCRATCH_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SCRATCH_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SCRATCH_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SCRATCH_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SPARE_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SPARE_WRITEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SPARE_VOLATILEMASK 0x0
#define pcie_ep_frame_ctrl_SPARE_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SPARE_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_SPARE_STATUS_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SPARE_STATUS_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_SPARE_STATUS_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SPARE_STATUS_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_SPARE_STATUS_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_HW_STATUS_READMASK 0xFF1
#define pcie_ep_frame_ctrl_HW_STATUS_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_HW_STATUS_VOLATILEMASK 0xFF1
#define pcie_ep_frame_ctrl_HW_STATUS_RESETMASK 0xFF1
#define pcie_ep_frame_ctrl_HW_STATUS_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_ADDR_STATUS_0_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_0_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_ADDR_STATUS_0_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_0_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_0_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_ADDR_STATUS_1_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_1_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_ADDR_STATUS_1_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_1_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_1_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_ADDR_STATUS_2_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_2_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_ADDR_STATUS_2_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_2_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_2_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_ADDR_STATUS_3_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_3_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_ADDR_STATUS_3_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_3_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_ADDR_STATUS_3_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_READMASK 0x7
#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_VOLATILEMASK 0x7
#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_RESETMASK 0x7
#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_READMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_VOLATILEMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_RESETMASK 0xFFFFFFFF
#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_DEFAULT 0x00000000

#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_READMASK 0x7
#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_WRITEMASK 0x0
#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_VOLATILEMASK 0x7
#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_RESETMASK 0x7
#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_DEFAULT 0x00000000

/* chip : pcie_ep */






typedef struct {
    
    union {
        pcie_ep_frame_ctrl_s s;
        hwint8 filler[0x2000];
    } frame_ctrl;
    
    
    hwint8 filler1[0x1E000];
    
} pcie_ep_s;

#define pcie_ep_s_SIZE 0x20000

#define pcie_ep_frame_ctrl_s_SIZE 0x2000

#define pcie_ep_frame_ctrl_common_SIZE 0x8

#define pcie_ep_frame_ctrl_HW_VERSION_SIZE 0x4

#define pcie_ep_frame_ctrl_SW_RESET_SIZE 0x4

#define pcie_ep_frame_ctrl_interrupt_SIZE 0x44

#define pcie_ep_frame_ctrl_HW_IRQ_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_IRQ_CMD_SIZE 0x4

#define pcie_ep_frame_ctrl_USR_IRQ_SIZE 0x4

#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_SIZE 0x4

#define pcie_ep_frame_ctrl_USR_IRQ_MASK_SIZE 0x4

#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_SIZE 0x4

#define pcie_ep_frame_ctrl_USR_IRQ_CMD_SIZE 0x4

#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_SIZE 0x4

#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_SIZE 0x4

#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_SIZE 0x4

#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_SIZE 0x4

#define pcie_ep_frame_ctrl_stream_addr_SIZE 0x1000
#define pcie_ep_frame_ctrl_stream_addr_PER_INSTANCE_SIZE 0x80
#define stream_addr_COUNT NUM_STREAM
#define pcie_ep_frame_ctrl_STREAM_CTRL_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_SIZE 0x4

#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_SIZE 0x4

#define pcie_ep_frame_ctrl_FRAME_SIZE_SIZE 0x4

#define pcie_ep_frame_ctrl_FRAME_START_SIZE 0x4

#define pcie_ep_frame_ctrl_STREAM_RESET_SIZE 0x4

#define pcie_ep_frame_ctrl_scratch_SIZE 0x100
#define pcie_ep_frame_ctrl_scratch_PER_INSTANCE_SIZE 0x4
#define pcie_ep_frame_ctrl_scratch_COUNT 64
#define pcie_ep_frame_ctrl_SCRATCH_SIZE 0x4

#define pcie_ep_frame_ctrl_spare_SIZE 0x80
#define pcie_ep_frame_ctrl_spare_PER_INSTANCE_SIZE 0x8
#define pcie_ep_frame_ctrl_spare_COUNT 16
#define pcie_ep_frame_ctrl_SPARE_SIZE 0x4

#define pcie_ep_frame_ctrl_SPARE_STATUS_SIZE 0x4

#define pcie_ep_frame_ctrl_common_debug_SIZE 0x4

#define pcie_ep_frame_ctrl_HW_STATUS_SIZE 0x4

#define pcie_ep_frame_ctrl_stream_debug_SIZE 0x480
#define pcie_ep_frame_ctrl_stream_debug_PER_INSTANCE_SIZE 0x24
#define stream_debug_COUNT NUM_STREAM
#define pcie_ep_frame_ctrl_ADDR_STATUS_0_SIZE 0x4

#define pcie_ep_frame_ctrl_ADDR_STATUS_1_SIZE 0x4

#define pcie_ep_frame_ctrl_ADDR_STATUS_2_SIZE 0x4

#define pcie_ep_frame_ctrl_ADDR_STATUS_3_SIZE 0x4

#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_SIZE 0x4

#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_SIZE 0x4

#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_SIZE 0x4

#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_SIZE 0x4

#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_SIZE 0x4


#define pcie_ep_s_OFFSET 0x0
#define pcie_ep_frame_ctrl_s_OFFSET 0x0
#define pcie_ep_frame_ctrl_common_OFFSET 0x0
#define pcie_ep_frame_ctrl_HW_VERSION_OFFSET 0x0
#define pcie_ep_frame_ctrl_SW_RESET_OFFSET 0x4
#define pcie_ep_frame_ctrl_interrupt_OFFSET 0x8
#define pcie_ep_frame_ctrl_HW_IRQ_OFFSET 0x0
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_OFFSET 0x4
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_OFFSET 0x8
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_OFFSET 0xC
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_OFFSET 0x10
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_OFFSET 0x14
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_OFFSET 0x18
#define pcie_ep_frame_ctrl_HW_IRQ_CMD_OFFSET 0x1C
#define pcie_ep_frame_ctrl_USR_IRQ_OFFSET 0x20
#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_OFFSET 0x24
#define pcie_ep_frame_ctrl_USR_IRQ_MASK_OFFSET 0x28
#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_OFFSET 0x2C
#define pcie_ep_frame_ctrl_USR_IRQ_CMD_OFFSET 0x30
#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_OFFSET 0x34
#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_OFFSET 0x38
#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_OFFSET 0x3C
#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_OFFSET 0x40
#define pcie_ep_frame_ctrl_stream_addr_OFFSET 0x100
#define pcie_ep_frame_ctrl_STREAM_CTRL_OFFSET 0x0
#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_OFFSET 0x4
#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_OFFSET 0x8
#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_OFFSET 0xC
#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_OFFSET 0x10
#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_OFFSET 0x14
#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_OFFSET 0x18
#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_OFFSET 0x1C
#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_OFFSET 0x20
#define pcie_ep_frame_ctrl_FRAME_SIZE_OFFSET 0x24
#define pcie_ep_frame_ctrl_FRAME_START_OFFSET 0x28
#define pcie_ep_frame_ctrl_STREAM_RESET_OFFSET 0x2C
#define pcie_ep_frame_ctrl_scratch_OFFSET 0x1100
#define pcie_ep_frame_ctrl_SCRATCH_OFFSET 0x0
#define pcie_ep_frame_ctrl_spare_OFFSET 0x1200
#define pcie_ep_frame_ctrl_SPARE_OFFSET 0x0
#define pcie_ep_frame_ctrl_SPARE_STATUS_OFFSET 0x4
#define pcie_ep_frame_ctrl_common_debug_OFFSET 0x1280
#define pcie_ep_frame_ctrl_HW_STATUS_OFFSET 0x0
#define pcie_ep_frame_ctrl_stream_debug_OFFSET 0x1284
#define pcie_ep_frame_ctrl_ADDR_STATUS_0_OFFSET 0x0
#define pcie_ep_frame_ctrl_ADDR_STATUS_1_OFFSET 0x4
#define pcie_ep_frame_ctrl_ADDR_STATUS_2_OFFSET 0x8
#define pcie_ep_frame_ctrl_ADDR_STATUS_3_OFFSET 0xC
#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_OFFSET 0x10
#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_OFFSET 0x14
#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_OFFSET 0x18
#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_OFFSET 0x1C
#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_OFFSET 0x20

#define pcie_ep_s_ADDRESS 0x00000
#define pcie_ep_frame_ctrl_s_ADDRESS 0x00000
#define pcie_ep_frame_ctrl_common_ADDRESS 0x00000
#define pcie_ep_frame_ctrl_HW_VERSION_ADDRESS 0x00000
#define pcie_ep_frame_ctrl_SW_RESET_ADDRESS 0x00004
#define pcie_ep_frame_ctrl_interrupt_ADDRESS 0x00008
#define pcie_ep_frame_ctrl_HW_IRQ_ADDRESS 0x00008
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_0_ADDRESS 0x0000C
#define pcie_ep_frame_ctrl_HW_IRQ_STATUS_1_ADDRESS 0x00010
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_0_ADDRESS 0x00014
#define pcie_ep_frame_ctrl_HW_IRQ_MASK_1_ADDRESS 0x00018
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_0_ADDRESS 0x0001C
#define pcie_ep_frame_ctrl_HW_IRQ_CLEAR_1_ADDRESS 0x00020
#define pcie_ep_frame_ctrl_HW_IRQ_CMD_ADDRESS 0x00024
#define pcie_ep_frame_ctrl_USR_IRQ_ADDRESS 0x00028
#define pcie_ep_frame_ctrl_USR_IRQ_STATUS_ADDRESS 0x0002C
#define pcie_ep_frame_ctrl_USR_IRQ_MASK_ADDRESS 0x00030
#define pcie_ep_frame_ctrl_USR_IRQ_CLEAR_ADDRESS 0x00034
#define pcie_ep_frame_ctrl_USR_IRQ_CMD_ADDRESS 0x00038
#define pcie_ep_frame_ctrl_FPGA_IRQ_STATUS_ADDRESS 0x0003C
#define pcie_ep_frame_ctrl_FPGA_IRQ_MASK_ADDRESS 0x00040
#define pcie_ep_frame_ctrl_FPGA_IRQ_CLEAR_ADDRESS 0x00044
#define pcie_ep_frame_ctrl_FPGA_IRQ_CMD_ADDRESS 0x00048
#define pcie_ep_frame_ctrl_stream_addr_ADDRESS 0x00100
#define pcie_ep_frame_ctrl_STREAM_CTRL_ADDRESS 0x00100
#define pcie_ep_frame_ctrl_SRC_ADDR_0_LO_ADDRESS 0x00104
#define pcie_ep_frame_ctrl_SRC_ADDR_0_HI_ADDRESS 0x00108
#define pcie_ep_frame_ctrl_SRC_ADDR_1_LO_ADDRESS 0x0010C
#define pcie_ep_frame_ctrl_SRC_ADDR_1_HI_ADDRESS 0x00110
#define pcie_ep_frame_ctrl_SRC_ADDR_2_LO_ADDRESS 0x00114
#define pcie_ep_frame_ctrl_SRC_ADDR_2_HI_ADDRESS 0x00118
#define pcie_ep_frame_ctrl_SRC_ADDR_3_LO_ADDRESS 0x0011C
#define pcie_ep_frame_ctrl_SRC_ADDR_3_HI_ADDRESS 0x00120
#define pcie_ep_frame_ctrl_FRAME_SIZE_ADDRESS 0x00124
#define pcie_ep_frame_ctrl_FRAME_START_ADDRESS 0x00128
#define pcie_ep_frame_ctrl_STREAM_RESET_ADDRESS 0x0012C
#define pcie_ep_frame_ctrl_scratch_ADDRESS 0x01100
#define pcie_ep_frame_ctrl_SCRATCH_ADDRESS 0x01100
#define pcie_ep_frame_ctrl_spare_ADDRESS 0x01200
#define pcie_ep_frame_ctrl_SPARE_ADDRESS 0x01200
#define pcie_ep_frame_ctrl_SPARE_STATUS_ADDRESS 0x01204
#define pcie_ep_frame_ctrl_common_debug_ADDRESS 0x01280
#define pcie_ep_frame_ctrl_HW_STATUS_ADDRESS 0x01280
#define pcie_ep_frame_ctrl_stream_debug_ADDRESS 0x01284
#define pcie_ep_frame_ctrl_ADDR_STATUS_0_ADDRESS 0x01284
#define pcie_ep_frame_ctrl_ADDR_STATUS_1_ADDRESS 0x01288
#define pcie_ep_frame_ctrl_ADDR_STATUS_2_ADDRESS 0x0128C
#define pcie_ep_frame_ctrl_ADDR_STATUS_3_ADDRESS 0x01290
#define pcie_ep_frame_ctrl_PENDING_FRAME_CNT_ADDRESS 0x01294
#define pcie_ep_frame_ctrl_DONE_FRAME_CNT_ADDRESS 0x01298
#define pcie_ep_frame_ctrl_NUM_DROPPED_FRAME_ADDRESS 0x0129C
#define pcie_ep_frame_ctrl_NUM_DROPPED_DESC_ADDRESS 0x012A0
#define pcie_ep_frame_ctrl_DESC_FIFO_STATUS_ADDRESS 0x012A4

#define FRAME_CTRL_COMMON_HW_VERSION_REVISION_OFFSET 16
#define FRAME_CTRL_COMMON_HW_VERSION_REVISION_MASK 0xFFFF0000
#define FRAME_CTRL_COMMON_HW_VERSION_REVISION_INV_MASK 0xFFFF
#define FRAME_CTRL_COMMON_HW_VERSION_REVISION_VALUE_MASK 0x7FFF8000
#define FRAME_CTRL_COMMON_HW_VERSION_REVISION_INV_VALUE_MASK 0x80007FFF
#define FRAME_CTRL_COMMON_HW_VERSION_REVISION_SIZE 16
#define FRAME_CTRL_COMMON_HW_VERSION_REVISION_DEFAULT 0
#define FRAME_CTRL_COMMON_HW_VERSION_MINOR_OFFSET 8
#define FRAME_CTRL_COMMON_HW_VERSION_MINOR_MASK 0xFF00
#define FRAME_CTRL_COMMON_HW_VERSION_MINOR_INV_MASK 0xFFFF00FF
#define FRAME_CTRL_COMMON_HW_VERSION_MINOR_VALUE_MASK 0x7F80
#define FRAME_CTRL_COMMON_HW_VERSION_MINOR_INV_VALUE_MASK 0xFFFF807F
#define FRAME_CTRL_COMMON_HW_VERSION_MINOR_SIZE 8
#define FRAME_CTRL_COMMON_HW_VERSION_MINOR_DEFAULT 0
#define FRAME_CTRL_COMMON_HW_VERSION_MAJOR_OFFSET 0
#define FRAME_CTRL_COMMON_HW_VERSION_MAJOR_MASK 0xFF
#define FRAME_CTRL_COMMON_HW_VERSION_MAJOR_INV_MASK 0xFFFFFF00
#define FRAME_CTRL_COMMON_HW_VERSION_MAJOR_VALUE_MASK 0x7F
#define FRAME_CTRL_COMMON_HW_VERSION_MAJOR_INV_VALUE_MASK 0xFFFFFF80
#define FRAME_CTRL_COMMON_HW_VERSION_MAJOR_SIZE 8
#define FRAME_CTRL_COMMON_HW_VERSION_MAJOR_DEFAULT 1
#define FRAME_CTRL_COMMON_SW_RESET_RESET_OFFSET 0  /* RESET DESCRIPTION :SW reset. Host can reset QDMA and custom logic (not including SW registers) by setting this bit to 1. This bit is self-clearing.  */
#define FRAME_CTRL_COMMON_SW_RESET_RESET_MASK 0x1
#define FRAME_CTRL_COMMON_SW_RESET_RESET_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_COMMON_SW_RESET_RESET_VALUE_MASK 0x0
#define FRAME_CTRL_COMMON_SW_RESET_RESET_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_COMMON_SW_RESET_RESET_SIZE 1
#define FRAME_CTRL_COMMON_SW_RESET_RESET_DEFAULT 0
#define FRAME_CTRL_COMMON_SW_RESET_RESET 0x1  /* RESET DESCRIPTION :SW reset. Host can reset QDMA and custom logic (not including SW registers) by setting this bit to 1. This bit is self-clearing. */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_FUNC_OFFSET 9  /* HW_IRQ_FUNC DESCRIPTION :Function number.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_FUNC_MASK 0xFE00
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_FUNC_INV_MASK 0xFFFF01FF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_FUNC_VALUE_MASK 0x7F00
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_FUNC_INV_VALUE_MASK 0xFFFF80FF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_FUNC_SIZE 7
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_FUNC_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_VEC_OFFSET 0  /* HW_IRQ_VEC DESCRIPTION :MSI-X vector number. Note: Do not assign same number as USER interrupt  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_VEC_MASK 0x1F
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_VEC_INV_MASK 0xFFFFFFE0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_VEC_VALUE_MASK 0xF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_VEC_INV_VALUE_MASK 0xFFFFFFF0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_VEC_SIZE 5
#define FRAME_CTRL_INTERRUPT_HW_IRQ_HW_IRQ_VEC_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_0_DESC_RELEASED_OFFSET 0  /* DESC_RELEASED DESCRIPTION :Descriptor is released. This indicates that QDMA starts the data transfer for the descriptor.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_0_DESC_RELEASED_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_0_DESC_RELEASED_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_0_DESC_RELEASED_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_0_DESC_RELEASED_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_0_DESC_RELEASED_SIZE 32
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_0_DESC_RELEASED_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_1_FRAME_DROPPED_OFFSET 0  /* FRAME_DROPPED DESCRIPTION :Frame dropped due to insufficient descriptors.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_1_FRAME_DROPPED_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_1_FRAME_DROPPED_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_1_FRAME_DROPPED_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_1_FRAME_DROPPED_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_1_FRAME_DROPPED_SIZE 32
#define FRAME_CTRL_INTERRUPT_HW_IRQ_STATUS_1_FRAME_DROPPED_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_0_DESC_RELEASED_OFFSET 0  /* DESC_RELEASED DESCRIPTION :Descriptor is released. This indicates that QDMA starts the data transfer for the descriptor.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_0_DESC_RELEASED_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_0_DESC_RELEASED_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_0_DESC_RELEASED_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_0_DESC_RELEASED_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_0_DESC_RELEASED_SIZE 32
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_0_DESC_RELEASED_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_1_FRAME_DROPPED_OFFSET 0  /* FRAME_DROPPED DESCRIPTION :Frame dropped due to insufficient descriptors.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_1_FRAME_DROPPED_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_1_FRAME_DROPPED_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_1_FRAME_DROPPED_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_1_FRAME_DROPPED_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_1_FRAME_DROPPED_SIZE 32
#define FRAME_CTRL_INTERRUPT_HW_IRQ_MASK_1_FRAME_DROPPED_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_0_DESC_RELEASED_OFFSET 0  /* DESC_RELEASED DESCRIPTION :Descriptor is released. This indicates that QDMA starts the data transfer for the descriptor.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_0_DESC_RELEASED_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_0_DESC_RELEASED_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_0_DESC_RELEASED_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_0_DESC_RELEASED_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_0_DESC_RELEASED_SIZE 32
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_0_DESC_RELEASED_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_1_FRAME_DROPPED_OFFSET 0  /* FRAME_DROPPED DESCRIPTION :Frame dropped due to insufficient descriptors.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_1_FRAME_DROPPED_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_1_FRAME_DROPPED_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_1_FRAME_DROPPED_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_1_FRAME_DROPPED_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_1_FRAME_DROPPED_SIZE 32
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CLEAR_1_FRAME_DROPPED_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR_OFFSET 0  /* CLEAR DESCRIPTION :IRQ clear command. Once SW programs 1 to it, IRQ status will be cleared based on IRQ_CLEAR_* register. This is self-clearing bit.  */
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR_MASK 0x1
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR_VALUE_MASK 0x0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR_SIZE 1
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_HW_IRQ_CMD_CLEAR 0x1  /* CLEAR DESCRIPTION :IRQ clear command. Once SW programs 1 to it, IRQ status will be cleared based on IRQ_CLEAR_* register. This is self-clearing bit. */
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_FUNC_OFFSET 9  /* USR_IRQ_FUNC DESCRIPTION :Function number.  */
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_FUNC_MASK 0xFE00
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_FUNC_INV_MASK 0xFFFF01FF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_FUNC_VALUE_MASK 0x7F00
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_FUNC_INV_VALUE_MASK 0xFFFF80FF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_FUNC_SIZE 7
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_FUNC_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_VEC_OFFSET 0  /* USR_IRQ_VEC DESCRIPTION :MSI-X vector number. Note: Do not assign same number as HW interrupt.  */
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_VEC_MASK 0x1F
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_VEC_INV_MASK 0xFFFFFFE0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_VEC_VALUE_MASK 0xF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_VEC_INV_VALUE_MASK 0xFFFFFFF0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_VEC_SIZE 5
#define FRAME_CTRL_INTERRUPT_USR_IRQ_USR_IRQ_VEC_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_STATUS_STATUS_OFFSET 0  /* STATUS DESCRIPTION :User IRQ status value. This register is expected to be written by ARM and read by host.  */
#define FRAME_CTRL_INTERRUPT_USR_IRQ_STATUS_STATUS_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_STATUS_STATUS_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_STATUS_STATUS_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_STATUS_STATUS_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_USR_IRQ_STATUS_STATUS_SIZE 32
#define FRAME_CTRL_INTERRUPT_USR_IRQ_STATUS_STATUS_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_MASK_MASK_OFFSET 0  /* MASK DESCRIPTION :User IRQ mask value. This register is expected to be written by ARM.  */
#define FRAME_CTRL_INTERRUPT_USR_IRQ_MASK_MASK_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_MASK_MASK_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_MASK_MASK_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_MASK_MASK_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_USR_IRQ_MASK_MASK_SIZE 32
#define FRAME_CTRL_INTERRUPT_USR_IRQ_MASK_MASK_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CLEAR_CLEAR_OFFSET 0  /* CLEAR DESCRIPTION :User IRQ clear value. This register is expected to be written by host.  */
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CLEAR_CLEAR_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CLEAR_CLEAR_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CLEAR_CLEAR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CLEAR_CLEAR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CLEAR_CLEAR_SIZE 32
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CLEAR_CLEAR_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR_OFFSET 0  /* CLEAR DESCRIPTION :User IRQ clear command. This register is self-clearing.  */
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR_MASK 0x1
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR_VALUE_MASK 0x0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR_SIZE 1
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_USR_IRQ_CMD_CLEAR 0x1  /* CLEAR DESCRIPTION :User IRQ clear command. This register is self-clearing. */
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_STATUS_STATUS_OFFSET 0  /* STATUS DESCRIPTION :FPGA IRQ is used for host to interrupt FPGA SW. IRQ status register is expected to be written by host and read by ARM.  */
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_STATUS_STATUS_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_STATUS_STATUS_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_STATUS_STATUS_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_STATUS_STATUS_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_STATUS_STATUS_SIZE 32
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_STATUS_STATUS_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_MASK_MASK_OFFSET 0  /* MASK DESCRIPTION :FPGA IRQ mask value. This register is expected to be written by host.  */
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_MASK_MASK_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_MASK_MASK_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_MASK_MASK_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_MASK_MASK_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_MASK_MASK_SIZE 32
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_MASK_MASK_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CLEAR_CLEAR_OFFSET 0  /* CLEAR DESCRIPTION :FPGA IRQ clear value. This register is expected to be written by ARM.  */
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CLEAR_CLEAR_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CLEAR_CLEAR_INV_MASK 0x0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CLEAR_CLEAR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CLEAR_CLEAR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CLEAR_CLEAR_SIZE 32
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CLEAR_CLEAR_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR_OFFSET 0  /* CLEAR DESCRIPTION :FPGA IRQ clear command. Once SW programs 1 to it, IRQ status will be cleared based on IRQ_CLEAR_* register. This is self-clearing bit.  */
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR_MASK 0x1
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR_VALUE_MASK 0x0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR_SIZE 1
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR_DEFAULT 0
#define FRAME_CTRL_INTERRUPT_FPGA_IRQ_CMD_CLEAR 0x1  /* CLEAR DESCRIPTION :FPGA IRQ clear command. Once SW programs 1 to it, IRQ status will be cleared based on IRQ_CLEAR_* register. This is self-clearing bit. */
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_QID_OFFSET 8  /* QID DESCRIPTION :QDMA queue ID for current stream  */
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_QID_MASK 0x7FF00
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_QID_INV_MASK 0xFFF800FF
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_QID_VALUE_MASK 0x3FF80
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_QID_INV_VALUE_MASK 0xFFFC007F
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_QID_SIZE 11
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_QID_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_NUM_ADDR_OFFSET 4  /* NUM_ADDR DESCRIPTION :Number of available addresses. Valid address always starts from ADDR_0.  */
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_NUM_ADDR_MASK 0x70
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_NUM_ADDR_INV_MASK 0xFFFFFF8F
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_NUM_ADDR_VALUE_MASK 0x38
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_NUM_ADDR_INV_VALUE_MASK 0xFFFFFFC7
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_NUM_ADDR_SIZE 3
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_NUM_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE_OFFSET 1  /* SW_CTRL_MODE DESCRIPTION :SW control mode. Under this mode, hardware will not listen to interrupts coming from camera interface. Instead, app processor is required to program FRAME_START command every time a frame is ready to be sent.  */
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE_MASK 0x2
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE_INV_MASK 0xFFFFFFFD
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE_VALUE_MASK 0x1
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE_INV_VALUE_MASK 0xFFFFFFFE
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE_SIZE 1
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_SW_CTRL_MODE 0x2  /* SW_CTRL_MODE DESCRIPTION :SW control mode. Under this mode, hardware will not listen to interrupts coming from camera interface. Instead, app processor is required to program FRAME_START command every time a frame is ready to be sent. */
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN_OFFSET 0  /* EN DESCRIPTION :Enable bit for current stream  */
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN_MASK 0x1
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN_VALUE_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN_SIZE 1
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_STREAM_CTRL_EN 0x1  /* EN DESCRIPTION :Enable bit for current stream */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_LO_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Lower 32-bit address value for 1st available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_LO_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_LO_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_LO_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_LO_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_LO_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_LO_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_HI_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Higher 4-bit address value for 1st available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_HI_ADDR_MASK 0xF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_HI_ADDR_INV_MASK 0xFFFFFFF0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_HI_ADDR_VALUE_MASK 0x7
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_HI_ADDR_INV_VALUE_MASK 0xFFFFFFF8
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_HI_ADDR_SIZE 4
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_0_HI_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_LO_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Lower 32-bit address value for 2nd available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_LO_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_LO_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_LO_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_LO_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_LO_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_LO_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_HI_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Higher 4-bit address value for 2nd available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_HI_ADDR_MASK 0xF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_HI_ADDR_INV_MASK 0xFFFFFFF0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_HI_ADDR_VALUE_MASK 0x7
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_HI_ADDR_INV_VALUE_MASK 0xFFFFFFF8
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_HI_ADDR_SIZE 4
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_1_HI_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_LO_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Lower 32-bit address value for 3rd available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_LO_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_LO_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_LO_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_LO_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_LO_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_LO_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_HI_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Higher 4-bit address value for 3rd available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_HI_ADDR_MASK 0xF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_HI_ADDR_INV_MASK 0xFFFFFFF0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_HI_ADDR_VALUE_MASK 0x7
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_HI_ADDR_INV_VALUE_MASK 0xFFFFFFF8
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_HI_ADDR_SIZE 4
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_2_HI_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_LO_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Lower 32-bit address value for 4th available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_LO_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_LO_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_LO_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_LO_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_LO_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_LO_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_HI_ADDR_OFFSET 0  /* ADDR DESCRIPTION :Higher 4-bit address value for 4th available address  */
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_HI_ADDR_MASK 0xF
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_HI_ADDR_INV_MASK 0xFFFFFFF0
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_HI_ADDR_VALUE_MASK 0x7
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_HI_ADDR_INV_VALUE_MASK 0xFFFFFFF8
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_HI_ADDR_SIZE 4
#define FRAME_CTRL_STREAM_ADDR_SRC_ADDR_3_HI_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_FRAME_SIZE_SIZE_OFFSET 0  /* SIZE DESCRIPTION :Frame size used to determine how many descriptors for each frame. If this field is set to 0, it means each frame only has 1 descriptor.  */
#define FRAME_CTRL_STREAM_ADDR_FRAME_SIZE_SIZE_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_FRAME_SIZE_SIZE_INV_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_FRAME_SIZE_SIZE_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_ADDR_FRAME_SIZE_SIZE_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_ADDR_FRAME_SIZE_SIZE_SIZE 32
#define FRAME_CTRL_STREAM_ADDR_FRAME_SIZE_SIZE_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD_OFFSET 0  /* CMD DESCRIPTION :Only used under SW control mode. SW is required to program 1 to this register every time a new frame is ready. This is self-clearing command register.  */
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD_MASK 0x1
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD_VALUE_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD_SIZE 1
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_FRAME_START_CMD 0x1  /* CMD DESCRIPTION :Only used under SW control mode. SW is required to program 1 to this register every time a new frame is ready. This is self-clearing command register. */
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET_OFFSET 0  /* RESET DESCRIPTION :Reset signal for the custom logic related with current stream. Note that SW needs to program it back to 0 after reset.  */
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET_MASK 0x1
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET_VALUE_MASK 0x0
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET_SIZE 1
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET_DEFAULT 0
#define FRAME_CTRL_STREAM_ADDR_STREAM_RESET_RESET 0x1  /* RESET DESCRIPTION :Reset signal for the custom logic related with current stream. Note that SW needs to program it back to 0 after reset. */
#define FRAME_CTRL_SCRATCH_SCRATCH_VAL_OFFSET 0  /* VAL DESCRIPTION :Scratch registers used for commincation between host and ARM processor  */
#define FRAME_CTRL_SCRATCH_SCRATCH_VAL_MASK 0xFFFFFFFF
#define FRAME_CTRL_SCRATCH_SCRATCH_VAL_INV_MASK 0x0
#define FRAME_CTRL_SCRATCH_SCRATCH_VAL_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_SCRATCH_SCRATCH_VAL_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_SCRATCH_SCRATCH_VAL_SIZE 32
#define FRAME_CTRL_SCRATCH_SCRATCH_VAL_DEFAULT 0
#define FRAME_CTRL_SPARE_SPARE_VAL_OFFSET 0  /* VAL DESCRIPTION :Spare registers for SW (either host or arm) to program information to HW. Value will show up on o_spare_* signals on PCIE_SS interface.  */
#define FRAME_CTRL_SPARE_SPARE_VAL_MASK 0xFFFFFFFF
#define FRAME_CTRL_SPARE_SPARE_VAL_INV_MASK 0x0
#define FRAME_CTRL_SPARE_SPARE_VAL_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_SPARE_SPARE_VAL_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_SPARE_SPARE_VAL_SIZE 32
#define FRAME_CTRL_SPARE_SPARE_VAL_DEFAULT 0
#define FRAME_CTRL_SPARE_SPARE_STATUS_VAL_OFFSET 0  /* VAL DESCRIPTION :Spare registers for HW to report status to SW (either host or arm). HW will take the value from i_spare_status_* signals on PCIE_SS interface.  */
#define FRAME_CTRL_SPARE_SPARE_STATUS_VAL_MASK 0xFFFFFFFF
#define FRAME_CTRL_SPARE_SPARE_STATUS_VAL_INV_MASK 0x0
#define FRAME_CTRL_SPARE_SPARE_STATUS_VAL_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_SPARE_SPARE_STATUS_VAL_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_SPARE_SPARE_STATUS_VAL_SIZE 32
#define FRAME_CTRL_SPARE_SPARE_STATUS_VAL_DEFAULT 0
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LAST_STREAM_ID_OFFSET 8  /* LAST_STREAM_ID DESCRIPTION :Last camera stream that was completed.  */
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LAST_STREAM_ID_MASK 0xF00
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LAST_STREAM_ID_INV_MASK 0xFFFFF0FF
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LAST_STREAM_ID_VALUE_MASK 0x780
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LAST_STREAM_ID_INV_VALUE_MASK 0xFFFFF87F
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LAST_STREAM_ID_SIZE 4
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LAST_STREAM_ID_DEFAULT 0
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_CURRENT_STREAM_ID_OFFSET 4  /* CURRENT_STREAM_ID DESCRIPTION :Current camera stream that's being sent.  */
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_CURRENT_STREAM_ID_MASK 0xF0
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_CURRENT_STREAM_ID_INV_MASK 0xFFFFFF0F
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_CURRENT_STREAM_ID_VALUE_MASK 0x78
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_CURRENT_STREAM_ID_INV_VALUE_MASK 0xFFFFFF87
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_CURRENT_STREAM_ID_SIZE 4
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_CURRENT_STREAM_ID_DEFAULT 0
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP_OFFSET 0  /* LINK_UP DESCRIPTION :PCIE link-up indicator  */
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP_MASK 0x1
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP_INV_MASK 0xFFFFFFFE
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP_VALUE_MASK 0x0
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP_INV_VALUE_MASK 0xFFFFFFFF
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP_SIZE 1
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP_DEFAULT 0
#define FRAME_CTRL_COMMON_DEBUG_HW_STATUS_LINK_UP 0x1  /* LINK_UP DESCRIPTION :PCIE link-up indicator */
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_0_CURRENT_SRC_ADDR_OFFSET 0  /* CURRENT_SRC_ADDR DESCRIPTION :Current source address (FPGA DDR) that's being consumed.  */
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_0_CURRENT_SRC_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_0_CURRENT_SRC_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_0_CURRENT_SRC_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_0_CURRENT_SRC_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_0_CURRENT_SRC_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_0_CURRENT_SRC_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_1_CURRENT_DEST_ADDR_OFFSET 0  /* CURRENT_DEST_ADDR DESCRIPTION :Current destination address (PCIE Host) that's being consumed.  */
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_1_CURRENT_DEST_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_1_CURRENT_DEST_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_1_CURRENT_DEST_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_1_CURRENT_DEST_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_1_CURRENT_DEST_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_1_CURRENT_DEST_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_2_LAST_SRC_ADDR_OFFSET 0  /* LAST_SRC_ADDR DESCRIPTION :Last source address that was consumed (previous completed frame)  */
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_2_LAST_SRC_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_2_LAST_SRC_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_2_LAST_SRC_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_2_LAST_SRC_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_2_LAST_SRC_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_2_LAST_SRC_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_3_LAST_DEST_ADDR_OFFSET 0  /* LAST_DEST_ADDR DESCRIPTION :Last destination address that was consumed.  */
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_3_LAST_DEST_ADDR_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_3_LAST_DEST_ADDR_INV_MASK 0x0
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_3_LAST_DEST_ADDR_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_3_LAST_DEST_ADDR_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_3_LAST_DEST_ADDR_SIZE 32
#define FRAME_CTRL_STREAM_DEBUG_ADDR_STATUS_3_LAST_DEST_ADDR_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_PENDING_FRAME_CNT_CNT_OFFSET 0  /* CNT DESCRIPTION :Number of pending frames (from MIPI) to be sent  */
#define FRAME_CTRL_STREAM_DEBUG_PENDING_FRAME_CNT_CNT_MASK 0x7
#define FRAME_CTRL_STREAM_DEBUG_PENDING_FRAME_CNT_CNT_INV_MASK 0xFFFFFFF8
#define FRAME_CTRL_STREAM_DEBUG_PENDING_FRAME_CNT_CNT_VALUE_MASK 0x3
#define FRAME_CTRL_STREAM_DEBUG_PENDING_FRAME_CNT_CNT_INV_VALUE_MASK 0xFFFFFFFC
#define FRAME_CTRL_STREAM_DEBUG_PENDING_FRAME_CNT_CNT_SIZE 3
#define FRAME_CTRL_STREAM_DEBUG_PENDING_FRAME_CNT_CNT_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_DONE_FRAME_CNT_CNT_OFFSET 0  /* CNT DESCRIPTION :Number of frames that have been completed  */
#define FRAME_CTRL_STREAM_DEBUG_DONE_FRAME_CNT_CNT_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_DONE_FRAME_CNT_CNT_INV_MASK 0x0
#define FRAME_CTRL_STREAM_DEBUG_DONE_FRAME_CNT_CNT_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_DONE_FRAME_CNT_CNT_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_DEBUG_DONE_FRAME_CNT_CNT_SIZE 32
#define FRAME_CTRL_STREAM_DEBUG_DONE_FRAME_CNT_CNT_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_FRAME_CNT_OFFSET 0  /* CNT DESCRIPTION :Number of frames that have been dropped  */
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_FRAME_CNT_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_FRAME_CNT_INV_MASK 0x0
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_FRAME_CNT_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_FRAME_CNT_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_FRAME_CNT_SIZE 32
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_FRAME_CNT_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_DESC_CNT_OFFSET 0  /* CNT DESCRIPTION :Number of host descriptors that have been dropped  */
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_DESC_CNT_MASK 0xFFFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_DESC_CNT_INV_MASK 0x0
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_DESC_CNT_VALUE_MASK 0x7FFFFFFF
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_DESC_CNT_INV_VALUE_MASK 0x80000000
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_DESC_CNT_SIZE 32
#define FRAME_CTRL_STREAM_DEBUG_NUM_DROPPED_DESC_CNT_DEFAULT 0
#define FRAME_CTRL_STREAM_DEBUG_DESC_FIFO_STATUS_WORD_CNT_OFFSET 0  /* WORD_CNT DESCRIPTION :Number of descriptors stored in FIFO  */
#define FRAME_CTRL_STREAM_DEBUG_DESC_FIFO_STATUS_WORD_CNT_MASK 0x7
#define FRAME_CTRL_STREAM_DEBUG_DESC_FIFO_STATUS_WORD_CNT_INV_MASK 0xFFFFFFF8
#define FRAME_CTRL_STREAM_DEBUG_DESC_FIFO_STATUS_WORD_CNT_VALUE_MASK 0x3
#define FRAME_CTRL_STREAM_DEBUG_DESC_FIFO_STATUS_WORD_CNT_INV_VALUE_MASK 0xFFFFFFFC
#define FRAME_CTRL_STREAM_DEBUG_DESC_FIFO_STATUS_WORD_CNT_SIZE 3
#define FRAME_CTRL_STREAM_DEBUG_DESC_FIFO_STATUS_WORD_CNT_DEFAULT 0
#endif /* _PCIE_EP_REGS_H_ */
/* end */
